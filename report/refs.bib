@inproceedings{read_broadcast_analysis,
  author    = {Eggers, S.J. and Katz, R.H.},
  booktitle = {The 16th Annual International Symposium on Computer Architecture},
  title     = {Evaluating The Performance Of Four Snooping Cache Coherency Protocols},
  year      = {1989},
  volume    = {},
  number    = {},
  pages     = {2-15},
  doi       = {10.1109/ISCA.1989.714519}
}

@article{read_broadcast_prop1,
  author     = {Goodman, J. R. and Woest, P. J.},
  title      = {The Wisconsin Multicube: A New Large-Scale Cache-Coherent Multiprocessor},
  year       = {1988},
  issue_date = {May 1988},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {16},
  number     = {2},
  issn       = {0163-5964},
  url        = {https://doi.org/10.1145/633625.52447},
  doi        = {10.1145/633625.52447},
  abstract   = {The Wisconsin Multicube, is a large-scale, shared-memory multiprocessor architecture that employs a snooping cache protocol over a grid of buses. Each processor has a conventional (SRAM) cache optimized to minimize memory latency and a large (DRAM) snooping cache optimized to reduce bus traffic and to maintain consistency. The large snooping cache should guarantee that nearly all the traffic on the buses will be generated by I/O and accesses to shared data.The programmer's view of the system is like a multi -- a set of processors having access to a common shared memory with no notion of geographical locality. Thus writing software, including the operating system, should be a straightforward extension of those techniques being developed for multis.The interconnection topology allows for a cache-coherent protocol for which most bus requests can be satisfied with no more than twice the number of bus operations required of a single-bus multi. The total symmetry guarantees that there are no topology-induced bottlenecks. The total bus bandwidth grows in proportion to the product of the number of processors and the average path length.The proposed architecture is an example of a new class of interconnection topologies -- the Multicube -- which consists of N =nk processors, where each processor is connected to k buses and each bus is connected to n processors. The hypercube is a special case where n=2. The Wisconsin Multicube is a two-dimensional Multicube (k=2), where n scales to about 32, resulting in a proposed system of over 1,000 processors.},
  journal    = {SIGARCH Comput. Archit. News},
  month      = {may},
  pages      = {422-431},
  numpages   = {10}
}

@article{read_broadcast_prop2,
  author     = {Karlin, Anna R. and Manasse, Mark S. and Rudolph, Larry and Sleator, Daniel D.},
  title      = {Competitive Snoopy Caching},
  year       = {1988},
  issue_date = {November  1988},
  publisher  = {Springer-Verlag},
  address    = {Berlin, Heidelberg},
  volume     = {3},
  number     = {1-4},
  issn       = {0178-4617},
  url        = {https://doi.org/10.1007/BF01762111},
  doi        = {10.1007/BF01762111},
  abstract   = {In a snoopy cache multiprocessor system, each processor has a cache in which it stores blocks of data. Each cache is connected to a bus used to communicate with the other caches and with main memory. Each cache monitors the activity on the bus and in its own processor and decides which blocks of data to keep and which to discard. For several of the proposed architectures for snoopy caching systems, we present new on-line algorithms to be used by the caches to decide which blocks to retain and which to drop in order to minimize communication over the bus. We prove that, for any sequence of operations, our algorithms' communication costs are within a constant factor of the minimum required for that sequence; for some of our algorithms we prove that no on-line algorithm has this property with a smaller constant.},
  journal    = {Algorithmica},
  month      = {nov},
  pages      = {79-119},
  numpages   = {41},
  keywords   = {Amortized analysis, Shared-bus multiprocessors, Page replacement, Shared memory, Cache coherence, Potential functions}
}

@article{read_broadcast_prop3,
  author     = {Rudolph, Larry and Segall, Zary},
  title      = {Dynamic Decentralized Cache Schemes for Mimd Parallel Processors},
  year       = {1984},
  issue_date = {June 1984},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {12},
  number     = {3},
  issn       = {0163-5964},
  url        = {https://doi.org/10.1145/773453.808203},
  doi        = {10.1145/773453.808203},
  abstract   = {This paper presents two cache schemes for a shared-memory shared bus multiprocessor. Both schemes feature decentralized consistency control and dynamic type classification of the datum cached (i.e. read-only, local, or shared). It is shown how to exploit these features to minimize the shared bus traffic. The broadcasting ability of the shared bus is used not only to signal an event but also to distribute data. In addition, by introducing a new synchronization construct, i.e. the Test-and-Test-and-Set instruction, many of the traditional. parallell processing “hot spots” or bottlenecks are eliminated. Sketches of formal correctness proofs for the proposed schemes are also presented. It appears that moderately large parallel processors can be designed by employing the principles presented in this paper.},
  journal    = {SIGARCH Comput. Archit. News},
  month      = {jan},
  pages      = {340-347},
  numpages   = {8}
}

@misc{mesi_wiki,
  author     = "{Wikipedia contributors}",
  title      = "MESI protocol --- {Wikipedia}{,} The Free Encyclopedia",
  year       = "2022",
  url        = "https://en.wikipedia.org/w/index.php?title=MESI_protocol&oldid=1117225828",
  note       = "[Online; accessed 7-November-2022]"
}

@misc{dragon_wiki,
  author = "{Wikipedia contributors}",
  title = "Dragon protocol --- {Wikipedia}{,} The Free Encyclopedia",
  year = "2022",
  url = "https://en.wikipedia.org/w/index.php?title=Dragon_protocol&oldid=1100758606",
  note = "[Online; accessed 7-November-2022]"
}
